{
  "version": 3,
  "sources": ["../../@sanity/image-url/src/parseAssetId.ts", "../../@sanity/image-url/src/parseSource.ts", "../../@sanity/image-url/src/urlForImage.ts", "../../@sanity/image-url/src/builder.ts", "dep:@sanity_image-url"],
  "sourcesContent": ["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n", "import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n", "import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n", "import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n", "export default require(\"./node_modules/@sanity/image-url/lib/browser/image-url.umd.js\");"],
  "mappings": "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",
  "names": ["const", "example", "parseAssetId", "ref", "split", "id", "dimensionString", "format", "Error", "imgWidthStr", "imgHeightStr", "width", "height", "isValidAssetId", "isFinite", "isRef", "src", "source", "_ref", "isAsset", "_id", "isAssetStub", "asset", "url", "parseSource", "image", "isUrl", "urlToId", "img", "crop", "hotspot", "applyDefaults", "test", "parts", "slice", "replace", "result", "left", "top", "bottom", "right", "x", "y", "SPEC_NAME_TO_URL_NAME_MAPPINGS", "urlForImage", "options", "spec", "JSON", "stringify", "cropLeft", "Math", "round", "cropTop", "hotSpotVerticalRadius", "hotSpotHorizontalRadius", "hotSpotCenterX", "hotSpotCenterY", "rect", "focalPoint", "ignoreImageParams", "fit", "specToImageUrl", "cdnUrl", "baseUrl", "filename", "projectId", "dataset", "params", "isEffectiveCrop", "push", "bg", "flip", "flipHorizontal", "flipVertical", "filter", "Boolean", "join", "forEach", "mapping", "specName", "param", "encodeURIComponent", "length", "cropRect", "imgWidth", "imgHeight", "desiredAspectRatio", "cropAspectRatio", "max", "hotspotXCenter", "hotspotYCenter", "validFits", "validCrops", "validAutoModes", "isSanityClientLike", "client", "clientConfig", "rewriteSpecName", "key", "specs", "entry", "urlBuilder", "apiUrl", "apiHost", "ImageUrlBuilder", "constructor", "parent", "withOptions", "newOptions", "hasOwnProperty", "specKey", "dpr", "maxWidth", "minWidth", "maxHeight", "minHeight", "size", "blur", "sharpen", "invert", "orientation", "quality", "forceDownload", "download", "value", "indexOf", "saturation", "auto", "pad", "toString"]
}
